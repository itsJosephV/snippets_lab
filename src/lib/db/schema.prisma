generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  collections Collection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}


// Snippets Schema
model Collection {
  id          String    @id @default(uuid())
  name        String
  description String?
  isDefault   Boolean
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  folders     Folder[]
}

model Folder {
  id           String    @id @default(uuid())
  name         String
  description  String?
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  snippets     Snippet[]
}

model Snippet {
  id          String    @id @default(uuid())
  title       String
  content     String
  language    String
  folderId    String
  folder      Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  description String?
  isFavorite  Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        Tag[]
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  snippets  Snippet[]
}

// For explicit many-to-many (if needed)
// model SnippetTag {
//   snippetId String
//   tagId     String
//   snippet   Snippet @relation(fields: [snippetId], references: [id])
//   tag       Tag     @relation(fields: [tagId], references: [id])
//   @@id([snippetId, tagId])
// }
